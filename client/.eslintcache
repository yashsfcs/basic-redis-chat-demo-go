[{"/home/roman/work/DR/basic-redis-chat-golang/client/src/index.jsx":"1","/home/roman/work/DR/basic-redis-chat-golang/client/src/App.jsx":"2","/home/roman/work/DR/basic-redis-chat-golang/client/src/state.js":"3","/home/roman/work/DR/basic-redis-chat-golang/client/src/hooks.js":"4","/home/roman/work/DR/basic-redis-chat-golang/client/src/websockets/process.js":"5","/home/roman/work/DR/basic-redis-chat-golang/client/src/components/LoadingScreen.jsx":"6","/home/roman/work/DR/basic-redis-chat-golang/client/src/components/Navbar.jsx":"7","/home/roman/work/DR/basic-redis-chat-golang/client/src/websockets/config.js":"8","/home/roman/work/DR/basic-redis-chat-golang/client/src/websockets/messages.js":"9","/home/roman/work/DR/basic-redis-chat-golang/client/src/websockets/data.js":"10","/home/roman/work/DR/basic-redis-chat-golang/client/src/components/Chat/index.jsx":"11","/home/roman/work/DR/basic-redis-chat-golang/client/src/components/Login/index.jsx":"12","/home/roman/work/DR/basic-redis-chat-golang/client/src/api.js":"13","/home/roman/work/DR/basic-redis-chat-golang/client/src/websockets/storage.js":"14","/home/roman/work/DR/basic-redis-chat-golang/client/src/websockets/view.js":"15","/home/roman/work/DR/basic-redis-chat-golang/client/src/components/Logo.jsx":"16","/home/roman/work/DR/basic-redis-chat-golang/client/src/components/Chat/components/TypingArea.jsx":"17","/home/roman/work/DR/basic-redis-chat-golang/client/src/components/Chat/components/MessageList/index.jsx":"18","/home/roman/work/DR/basic-redis-chat-golang/client/src/components/Chat/components/ChatList/index.jsx":"19","/home/roman/work/DR/basic-redis-chat-golang/client/src/components/Chat/components/MessageList/components/InfoMessage.jsx":"20","/home/roman/work/DR/basic-redis-chat-golang/client/src/components/Chat/components/MessageList/components/MessagesLoading.jsx":"21","/home/roman/work/DR/basic-redis-chat-golang/client/src/components/Chat/components/MessageList/components/SenderMessage.jsx":"22","/home/roman/work/DR/basic-redis-chat-golang/client/src/components/Chat/components/MessageList/components/NoMessages.jsx":"23","/home/roman/work/DR/basic-redis-chat-golang/client/src/components/Chat/components/MessageList/components/ReceiverMessage.jsx":"24","/home/roman/work/DR/basic-redis-chat-golang/client/src/components/Chat/components/ChatList/components/Footer.jsx":"25","/home/roman/work/DR/basic-redis-chat-golang/client/src/components/Chat/components/ChatList/components/ChatListItem/index.jsx":"26","/home/roman/work/DR/basic-redis-chat-golang/client/src/components/Chat/components/MessageList/components/ClockIcon.jsx":"27","/home/roman/work/DR/basic-redis-chat-golang/client/src/components/Chat/components/OnlineIndicator.jsx":"28","/home/roman/work/DR/basic-redis-chat-golang/client/src/components/Chat/components/ChatList/components/AvatarImage.jsx":"29","/home/roman/work/DR/basic-redis-chat-golang/client/src/utils.js":"30","/home/roman/work/DR/basic-redis-chat-golang/client/src/components/Chat/components/ChatList/components/ChatIcon.jsx":"31"},{"size":307,"mtime":1611555460000,"results":"32","hashOfConfig":"33"},{"size":1572,"mtime":1615974526000,"results":"34","hashOfConfig":"33"},{"size":4693,"mtime":1616073140000,"results":"35","hashOfConfig":"33"},{"size":678,"mtime":1615989396000,"results":"36","hashOfConfig":"33"},{"size":1986,"mtime":1616074220000,"results":"37","hashOfConfig":"33"},{"size":262,"mtime":1611555460000,"results":"38","hashOfConfig":"33"},{"size":2236,"mtime":1611555460000,"results":"39","hashOfConfig":"33"},{"size":124,"mtime":1616623575380,"results":"40","hashOfConfig":"33"},{"size":2682,"mtime":1616073348000,"results":"41","hashOfConfig":"33"},{"size":2142,"mtime":1616073852000,"results":"42","hashOfConfig":"33"},{"size":2641,"mtime":1615972964000,"results":"43","hashOfConfig":"33"},{"size":5970,"mtime":1615876782000,"results":"44","hashOfConfig":"33"},{"size":2369,"mtime":1615983568000,"results":"45","hashOfConfig":"33"},{"size":511,"mtime":1615816064000,"results":"46","hashOfConfig":"33"},{"size":2636,"mtime":1615820344000,"results":"47","hashOfConfig":"33"},{"size":2228,"mtime":1611555460000,"results":"48","hashOfConfig":"33"},{"size":977,"mtime":1611555460000,"results":"49","hashOfConfig":"33"},{"size":2761,"mtime":1616073194000,"results":"50","hashOfConfig":"33"},{"size":1604,"mtime":1616073882000,"results":"51","hashOfConfig":"33"},{"size":257,"mtime":1611555460000,"results":"52","hashOfConfig":"33"},{"size":374,"mtime":1611555460000,"results":"53","hashOfConfig":"33"},{"size":1327,"mtime":1615972128000,"results":"54","hashOfConfig":"33"},{"size":357,"mtime":1611555460000,"results":"55","hashOfConfig":"33"},{"size":945,"mtime":1615972128000,"results":"56","hashOfConfig":"33"},{"size":1409,"mtime":1616073158000,"results":"57","hashOfConfig":"33"},{"size":2128,"mtime":1615983568000,"results":"58","hashOfConfig":"33"},{"size":460,"mtime":1611555460000,"results":"59","hashOfConfig":"33"},{"size":305,"mtime":1611555460000,"results":"60","hashOfConfig":"33"},{"size":1052,"mtime":1611555460000,"results":"61","hashOfConfig":"33"},{"size":1630,"mtime":1611555460000,"results":"62","hashOfConfig":"33"},{"size":1094,"mtime":1611555460000,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"o0gdpq",{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/roman/work/DR/basic-redis-chat-golang/client/src/index.jsx",[],"/home/roman/work/DR/basic-redis-chat-golang/client/src/App.jsx",["136","137"],"// @ts-check\r\nimport React, {useEffect, useState} from \"react\";\r\nimport Login from \"./components/Login\";\r\nimport Chat from \"./components/Chat\";\r\nimport {AppContext} from \"./state\";\r\nimport {LoadingScreen} from \"./components/LoadingScreen\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport {processChannelMessage, processSignIn} from \"./websockets/process\";\r\nimport useAppStateContext from './state';\r\nimport {initWebSocket} from './hooks';\r\n\r\nconst App = () => {\r\n    const [showLogin, setShowLogin] = useState(true)\r\n    const [state, dispatch] = useAppStateContext();\r\n\r\n    function onLogout() {\r\n        localStorage.clear();\r\n        setShowLogin(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        initWebSocket({dispatch, state});\r\n    }, []);\r\n\r\n    return (\r\n        <AppContext.Provider value={[state, dispatch]}>\r\n            <div\r\n                className={`full-height ${showLogin ? \"bg-light\" : \"\"}`}\r\n                style={{\r\n                    backgroundColor: !showLogin ? \"#495057\" : undefined,\r\n                }}\r\n            >\r\n                <Navbar/>\r\n                {showLogin ? (\r\n                    <Login onLogIn={processSignIn} setShowLogin={setShowLogin}/>\r\n                ) : (\r\n                    <Chat\r\n                        user={state.user}\r\n                        users={state.users}\r\n                        onMessageSend={processChannelMessage}\r\n                        onLogOut={onLogout}\r\n                    />\r\n                )}\r\n            </div>\r\n        </AppContext.Provider>\r\n    );\r\n\r\n\r\n};\r\n\r\nexport default App;\r\n","/home/roman/work/DR/basic-redis-chat-golang/client/src/state.js",[],"/home/roman/work/DR/basic-redis-chat-golang/client/src/hooks.js",[],"/home/roman/work/DR/basic-redis-chat-golang/client/src/websockets/process.js",["138","139","140","141","142"],"/*\n*   Basic processing examples\n*\n*   You can compare websocket messages sending or receiving together in\n*   specific functions for make custom processing flow\n*\n* */\n\nimport {webSocketSend} from \"../hooks\";\nimport {DataChannelJoin, DataChannelLeave, DataChannelMessage, DataSignIn, DataUsers} from \"./data\";\nimport {node} from \"prop-types\";\n\nlet inputSignInUsername = null;\nlet inputSignInPassword = null;\nlet inputMessage = null;\n\nconst nodeIdInputSignInUsername = \"input-username\";\nconst nodeIdInputSignInPassword = \"input-password\";\nconst nodeIdInputMessage = \"input-message\";\n\nlet selectedRecipientUUID = \"\";\n\n// signIn flow\nexport function processSignIn(username,password,setShowLogin) {\n    let process = new Promise((resolve, reject) => {\n        webSocketSend(DataSignIn(username, password));\n        resolve();\n    })\n\n    process.then(() => {webSocketSend(DataUsers())});\n    process.then(() => {webSocketSend(DataChannelJoin(\"\"));});\n    process.catch((err) => {console.log(err)});\n\n    setShowLogin(false)\n    return ;\n}\n\nexport function processChannelJoin(recipientUUID) {\n    let process = new Promise((resolve, reject) => {\n        webSocketSend(DataChannelJoin(recipientUUID));\n        resolve();\n    });\n    process.then(() => {selectedRecipientUUID = recipientUUID;})\n    process.catch((err) => console.log(err));\n}\n\nexport function processChannelLeave() {\n    let process = new Promise((resolve, reject) => {\n        webSocketSend(DataChannelLeave(selectedRecipientUUID));\n        resolve();\n    });\n    process.catch((err) => console.log('error', err));\n}\n\nexport function processChannelMessage(inputMessage) {\n    if(inputMessage == null) {\n        inputMessage = node(nodeIdInputMessage);\n    }\n    console.log('channelMessage', inputMessage)\n    let process = new Promise((resolve, reject) => webSocketSend(DataChannelMessage(selectedRecipientUUID, inputMessage)));\n    process.then(() => {});\n    process.catch((err) => console.log(err));\n    return false;\n}\n","/home/roman/work/DR/basic-redis-chat-golang/client/src/components/LoadingScreen.jsx",[],"/home/roman/work/DR/basic-redis-chat-golang/client/src/components/Navbar.jsx",["143"],"// @ts-check\nimport React, { useEffect, useState } from \"react\";\nimport { getButtonLinks } from \"../api\";\n\nconst Navbar = () => {\n  /**\n   * @type {[{\n   *  heroku?: string;\n   *  google_cloud?: string;\n   *  vercel?: string;\n   *  github?: string;\n   *  }, React.Dispatch<any>]}\n   */\n  const [links, setLinks] = useState(null);\n  useEffect(() => {\n    getButtonLinks().then(setLinks);\n  }, []);\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-white\">\n      <span className=\"navbar-brand\">Redis chat demo</span>\n      {links !== null ? (\n        <span className=\"navbar-text\">\n          {links.github && <GithubIcon link={links.github} />}\n        </span>\n      ) : (\n        <></>\n      )}\n    </nav>\n  );\n};\n\nconst GithubIcon = ({ link }) => (\n  <a\n    href={link}\n    // eslint-disable-next-line\n    target=\"_blank\"\n    title=\"Github\"\n  >\n    <svg\n      width={24}\n      height={24}\n      viewBox=\"0 0 64 64\"\n      aria-labelledby=\"title\"\n      aria-describedby=\"desc\"\n      role=\"img\"\n    >\n      <path\n        data-name=\"layer2\"\n        d=\"M32 0a32.021 32.021 0 0 0-10.1 62.4c1.6.3 2.2-.7 2.2-1.5v-6c-8.9 1.9-10.8-3.8-10.8-3.8-1.5-3.7-3.6-4.7-3.6-4.7-2.9-2 .2-1.9.2-1.9 3.2.2 4.9 3.3 4.9 3.3 2.9 4.9 7.5 3.5 9.3 2.7a6.93 6.93 0 0 1 2-4.3c-7.1-.8-14.6-3.6-14.6-15.8a12.27 12.27 0 0 1 3.3-8.6 11.965 11.965 0 0 1 .3-8.5s2.7-.9 8.8 3.3a30.873 30.873 0 0 1 8-1.1 30.292 30.292 0 0 1 8 1.1c6.1-4.1 8.8-3.3 8.8-3.3a11.965 11.965 0 0 1 .3 8.5 12.1 12.1 0 0 1 3.3 8.6c0 12.3-7.5 15-14.6 15.8a7.746 7.746 0 0 1 2.2 5.9v8.8c0 .9.6 1.8 2.2 1.5A32.021 32.021 0 0 0 32 0z\"\n        fill=\"#595F70\"\n      ></path>\n      <path\n        data-name=\"layer1\"\n        d=\"M12.1 45.9c-.1.2-.3.2-.5.1s-.4-.3-.3-.5.3-.2.6-.1c.2.2.3.4.2.5zm1.3 1.5a.589.589 0 0 1-.8-.8.631.631 0 0 1 .7.1.494.494 0 0 1 .1.7zm1.3 1.8a.585.585 0 0 1-.7-.3.6.6 0 0 1 0-.8.585.585 0 0 1 .7.3c.2.3.2.7 0 .8zm1.7 1.8c-.2.2-.5.1-.8-.1-.3-.3-.4-.6-.2-.8a.619.619 0 0 1 .8.1.554.554 0 0 1 .2.8zm2.4 1c-.1.3-.4.4-.8.3s-.6-.4-.5-.7.4-.4.8-.3c.3.2.6.5.5.7zm2.6.2c0 .3-.3.5-.7.5s-.7-.2-.7-.5.3-.5.7-.5c.4.1.7.3.7.5zm2.4-.4q0 .45-.6.6a.691.691 0 0 1-.8-.3q0-.45.6-.6c.5-.1.8.1.8.3z\"\n        fill=\"#595F70\"\n      ></path>\n    </svg>\n  </a>\n);\n\nexport default Navbar;\n","/home/roman/work/DR/basic-redis-chat-golang/client/src/websockets/config.js",[],"/home/roman/work/DR/basic-redis-chat-golang/client/src/websockets/messages.js",["144","145","146","147","148"],"/*\n* Websocket onmessage event handlers\n*\n* ws.onmessage event has one argument `event`,\n* we should read `event.data` value, it contained message from backend\n*\n* `event.data` is stringify JSON object, each of received JSON object contained `type:\"<Message Type>\"` property\n*\n* `messages` - is a key:value map, where:\n*   - key: received message type from websocket, message type contained in `event.data.type`\n*   - value: handler function for processing received message\n* */\n\nimport {storageKeySessionUUID, storageKeyUserAccessKey, storageKeyUserUUID, StorageSet} from \"./storage\";\nimport {viewMessagesAdd, viewShowPageChat, viewUsersAdd, viewUsersClean} from \"./view\";\nimport useAppStateContext from '../state';\n\nexport const messages = {\n    // system message from backend, usually it contained system info for debug\n    \"sys\": sys,\n    // error from backend when backend received message and can't processed it\n    \"error\": error,\n    // backend return session UUID when websocket connection successful\n    \"ready\": ready,\n    // backend return user data on signIn successful\n    \"authorized\": authorized,\n    // backend return all users\n    \"users\": users,\n    // backend said that somebody joined to channel\n    \"channelJoin\": channelJoin,\n    // backend said that channel accepted new message\n    \"channelMessage\": channelMessage\n}\n\nconst messagesSys = {\n    \"signIn\": sysSignIn(),\n}\n\nfunction sys(data, {dispatch}) {\n    if(typeof messagesSys[data.sys.type] == \"function\") {\n        messagesSys[data.sys.type](data.sys);\n    } else {\n        console.log(\"Unknown message sys.type: \" + data.sys.type)\n    }\n    if (data.sys.signIn)\n        dispatch({type: 'set user', payload: data.sys.signIn});\n}\n\nfunction error(data) {\n    console.log(\"error: \" + data.error.code + \" - \" + data.error.message, data)\n}\n\nfunction ready(data) {\n    StorageSet(storageKeySessionUUID, data.ready.sessionUUID);\n}\n\nfunction authorized(data) {\n    StorageSet(storageKeyUserUUID,data.authorized.userUUID);\n    StorageSet(storageKeyUserAccessKey, data.authorized.accessKey);\n}\n\n\nfunction users(data, {dispatch}) {\n    dispatch({type: 'set users', payload: data.users.users})\n    dispatch({type: 'set rooms', payload: data.users.users})\n}\n\nfunction channelJoin(data, {dispatch}) {\n    dispatch({type: 'set messages', payload: data.channelJoin.messages || []});\n    dispatch({type: 'set users', payload: data.channelJoin.users});\n}\n\nfunction channelMessage(data, {dispatch}) {\n    console.log('append message', data);\n    dispatch({type: 'append message', payload: {id: data.channelMessage.RecipientUUID, message: data.channelMessage}});\n}\n\nfunction sysSignIn(data){\n    console.log('sysSignIn')\n}\n","/home/roman/work/DR/basic-redis-chat-golang/client/src/websockets/data.js",["149"],"/*\n* Will return data object for websocket send to backend\n*\n*   function Data<MessageType>([argument, ...]) {\n*       return {\n*           <Property>: <Value>,\n*           ...\n*       }\n*   }\n*\n* */\n\nimport {StorageGet, storageKeySessionUUID, storageKeyUserAccessKey, storageKeyUserUUID} from \"./storage\";\n\nconst dataTypeSignIn = \"signIn\";\nconst dataTypeSignOut = \"signOut\";\nconst dataTypeUsers = \"users\";\nconst dataTypeChannelJoin = \"channelJoin\";\nconst dataTypeChannelMessage = \"channelMessage\";\nconst dataTypeChannelLeave = \"channelLeave\";\n\nexport function DataSignIn(username, password) {\n    return {\n        SUUID: StorageGet(storageKeySessionUUID),\n        type: dataTypeSignIn,\n        signIn: {\n            username: username,\n            password: password\n        }\n    }\n}\n\nexport function DataUsers() {\n    return {\n        SSUID: StorageGet(storageKeySessionUUID),\n        type: dataTypeUsers,\n        userUUID: StorageGet(storageKeyUserUUID),\n        accessKey: StorageGet(storageKeyUserAccessKey),\n    }\n}\n\nexport function DataChannelJoin(recipientUUID) {\n    return {\n        SUUID: StorageGet(storageKeySessionUUID),\n        type: dataTypeChannelJoin,\n        userUUID: StorageGet(storageKeyUserUUID),\n        accessKey: StorageGet(storageKeyUserAccessKey),\n        channelJoin: {\n            recipientUUID: recipientUUID\n        }\n    }\n}\n\nexport function DataChannelLeave(recipientUUID) {\n    return {\n        SUUID: StorageGet(storageKeySessionUUID),\n        type: dataTypeChannelLeave,\n        userUUID: StorageGet(storageKeyUserUUID),\n        userAccessKey: StorageGet(storageKeyUserAccessKey),\n        channelLeave: {\n            recipientUUID: recipientUUID,\n            senderUUID: StorageGet(storageKeyUserUUID)\n        }\n    }\n}\n\nexport function DataChannelMessage(recipientUUID, message) {\n    return {\n        SUUID: StorageGet(storageKeySessionUUID),\n        type: dataTypeChannelMessage,\n        userUUID: StorageGet(storageKeyUserUUID),\n        accessKey: StorageGet(storageKeyUserAccessKey),\n        channelMessage: {\n            recipientUUID: recipientUUID,\n            message: message\n        }\n    }\n}\n","/home/roman/work/DR/basic-redis-chat-golang/client/src/components/Chat/index.jsx",["150","151","152"],"// @ts-check\r\nimport React, {useCallback, useEffect, useRef, useState} from \"react\";\r\nimport ChatList from \"./components/ChatList\";\r\nimport MessageList from \"./components/MessageList\";\r\nimport TypingArea from \"./components/TypingArea\";\r\nimport useAppStateContext, {useAppState} from '../../state';\r\n\r\n/**\r\n * @param {{\r\n *  onLogOut: () => void,\r\n *  onMessageSend: (message: string, roomId: string) => void,\r\n *  user: import(\"../../state\").UserEntry\r\n * }} props\r\n */\r\nexport default function Chat({ onLogOut, user, onMessageSend, users }) {\r\n  const [{rooms, currentRoom}] = useAppState();\r\n\r\n  const [room, setRoom] = useState({});\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const messageListElement = useRef(null);\r\n\r\n  const scrollToBottom = useCallback(() => {\r\n    if (messageListElement.current) {\r\n      messageListElement.current.scrollTo({\r\n        top: messageListElement.current.scrollHeight,\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [rooms[currentRoom].messages, scrollToBottom]);\r\n\r\n  useEffect(() => {\r\n    setRoom(rooms[currentRoom]);\r\n  }, [currentRoom])\r\n\r\n  return (\r\n    <div className=\"container py-5 px-4\">\r\n      <div className=\"chat-body row overflow-hidden shadow bg-light rounded\">\r\n        <div className=\"col-4 px-0\">\r\n          <ChatList\r\n            user={user}\r\n            onLogOut={onLogOut}\r\n            rooms={rooms}\r\n            currentRoom={currentRoom}\r\n          />\r\n        </div>\r\n        {/* Chat Box*/}\r\n        <div className=\"col-8 px-0 flex-column bg-white rounded-lg\">\r\n          <div className=\"px-4 py-4\" style={{ borderBottom: \"1px solid #eee\" }}>\r\n            <h2 className=\"font-size-15 mb-0\">\r\n              {room ? room.name : \"Room\"}\r\n              {\" Room\"}\r\n            </h2>\r\n          </div>\r\n          <MessageList\r\n            messageListElement={messageListElement}\r\n            messages={rooms[currentRoom].messages}\r\n            room={rooms[currentRoom]}\r\n            // onLoadMoreMessages={onLoadMoreMessages}\r\n            user={user}\r\n            // onUserClicked={onUserClicked}\r\n          />\r\n\r\n          {/* Typing area */}\r\n          <TypingArea\r\n            message={message}\r\n            setMessage={setMessage}\r\n            onSubmit={(e) => {\r\n              e.preventDefault();\r\n              if (message) {\r\n                onMessageSend(message.trim(), room.id);\r\n                setMessage(\"\");\r\n\r\n                messageListElement.current.scrollTop =\r\n                    messageListElement.current.scrollHeight;\r\n              }\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","/home/roman/work/DR/basic-redis-chat-golang/client/src/components/Login/index.jsx",[],"/home/roman/work/DR/basic-redis-chat-golang/client/src/api.js",[],"/home/roman/work/DR/basic-redis-chat-golang/client/src/websockets/storage.js",[],"/home/roman/work/DR/basic-redis-chat-golang/client/src/websockets/view.js",["153","154","155","156"],"/*\n*\n* Simple page rendering and DOM/view changes depend on websocket processing\n*\n* */\nimport {StorageGet, storageKeyUserUUID} from \"./storage\";\n\nlet viewNodePageSignIn = null;\nlet viewNodePageChat = null;\n\nlet viewNodeSys = null;\nlet viewNodeError = null;\nlet viewNodeUsers = null;\nlet viewNodeMessages = null;\n\nconst nodeIdPageSignIn = \"page-signIn\"\nconst nodeIdPageChat = \"page-chat\"\n\nconst nodeIdSys = \"view-sys\";\nconst nodeIdUsers = \"view-users\";\nconst nodeIdErrors = \"view-errors\";\nconst nodeIdMessages = \"view-messages\";\n\nconst node = (id) => {return document.getElementById(id);}\n\nexport function viewPagesInitialize() {\n    if(viewNodePageSignIn == null){\n        viewNodePageSignIn = node(nodeIdPageSignIn);\n    }\n    if(viewNodePageChat == null){\n        viewNodePageChat = node(nodeIdPageChat);\n    }\n}\n\nexport function viewShowPageSignIn() {\n    viewPagesInitialize();\n    viewNodePageChat.style.display = \"none\";\n    viewNodePageSignIn.style.display = \"block\";\n}\n\n\n\n\nexport function viewSysAdd(message) {\n    if(viewNodeSys == null) {\n        viewNodeSys =node(nodeIdSys);\n    }\n\n    viewNodeSys.innerHTML = '<div class=\"log-sys\">'+message+'</div>' + viewNodeSys.innerHTML;\n}\n\nexport function viewErrorAdd(message) {\n    if(viewNodeError == null){\n        viewNodeError = node(nodeIdErrors);\n    }\n}\n\n\n\n\nexport function buildNodeMessage(message) {\n    let divSender = \"\";\n    if(typeof message.Sender != \"undefined\") {\n        divSender = '<div class=\"message-' + message.UUID + '-sender\">' + message.Sender.Username + '</div>';\n    }\n    let divRecipient = \"\";\n    if(typeof message.Recipient != \"undefined\") {\n        divRecipient = '<div class=\"message-' + message.UUID + '-recipient\">' + message.Recipient.Username + '</div>';\n    }\n    if(divSender === \"\" && divRecipient === \"\") {\n        return false;\n    }\n    let div = document.createElement(\"div\");\n    div.id = \"message-\" + message.UUID;\n    div.innerHTML = divSender + divRecipient +\n        '<div class=\"message-' + message.UUID + '-message\">' + message.Message + '</div>' +\n        '<div class=\"message-' + message.UUID + '-datetime\">' + message.CreatedAt + '</div>' ;\n\n    return div;\n}\n\n/*\n* @params message Object\n* */\nexport function viewMessagesAdd(message) {\n    if(viewNodeMessages == null){\n        viewNodeMessages = node(nodeIdMessages);\n    }\n\n    const messageNode = buildNodeMessage(message);\n\n    if(messageNode === false) {\n        return;\n    }\n    const nodes = viewNodeMessages.childNodes;\n    if(nodes > 0){\n        viewNodeMessages.insertBefore(nodes[0], messageNode);\n    } else {\n        viewNodeMessages.append(messageNode);\n    }\n}\n","/home/roman/work/DR/basic-redis-chat-golang/client/src/components/Logo.jsx",[],"/home/roman/work/DR/basic-redis-chat-golang/client/src/components/Chat/components/TypingArea.jsx",[],"/home/roman/work/DR/basic-redis-chat-golang/client/src/components/Chat/components/MessageList/index.jsx",["157"],"// @ts-check\nimport React from \"react\";\nimport {login, MESSAGES_TO_LOAD} from \"../../../../api\";\nimport InfoMessage from \"./components/InfoMessage\";\nimport MessagesLoading from \"./components/MessagesLoading\";\nimport NoMessages from \"./components/NoMessages\";\nimport ReceiverMessage from \"./components/ReceiverMessage\";\nimport SenderMessage from \"./components/SenderMessage\";\n\nconst MessageList = ({\n  messageListElement,\n  messages,\n  room,\n  onLoadMoreMessages,\n  user = {},\n  onUserClicked,\n}) => {\n  return (\n  <div\n    ref={messageListElement}\n    className=\"chat-box-wrapper position-relative d-flex\"\n  >\n    {messages === undefined ? (\n      <MessagesLoading />\n    ) : messages.length === 0 ? (\n      <NoMessages />\n    ) : (\n      <></>\n    )}\n    <div className=\"px-4 pt-5 chat-box position-absolute\">\n      {messages && messages.length !== 0 && (\n        <>\n          {room.offset && room.offset >= MESSAGES_TO_LOAD ? (\n            <div className=\"d-flex flex-row align-items-center mb-4\">\n              <div\n                style={{ height: 1, backgroundColor: \"#eee\", flex: 1 }}\n              ></div>\n              <div className=\"mx-3\">\n                <button\n                  aria-haspopup=\"true\"\n                  aria-expanded=\"true\"\n                  type=\"button\"\n                  onClick={onLoadMoreMessages}\n                  className=\"btn rounded-button btn-secondary nav-btn\"\n                  id=\"__BVID__168__BV_toggle_\"\n                >\n                  Load more\n                </button>\n              </div>\n              <div\n                style={{ height: 1, backgroundColor: \"#eee\", flex: 1 }}\n              ></div>\n            </div>\n          ) : (\n            <></>\n          )}\n          {messages.map((message, x) => {\n            const key = message.Message + message.CreatedAt + message.SenderUUID + x;\n            if (message.SenderUUID === \"info\") {\n              return <InfoMessage key={key} message={message.Message} />;\n            }\n            if (message.SenderUUID !== user.uuid) {\n              return (\n                <SenderMessage\n                  onUserClicked={() => onUserClicked(message.SenderUUID)}\n                  key={key}\n                  message={message.Message}\n                  date={message.CreatedAt}\n                  user={message.Sender}\n                />\n              );\n            }\n            return (\n              <ReceiverMessage\n                username={\n                  message.Sender ?  message.Sender.Username : \"\"\n                }\n                key={key}\n                message={message.Message}\n                date={message.CreatedAt}\n              />\n            );\n          })}\n        </>\n      )}\n    </div>\n  </div>\n)};\nexport default MessageList;\n","/home/roman/work/DR/basic-redis-chat-golang/client/src/components/Chat/components/ChatList/index.jsx",["158","159"],"// @ts-check\nimport React, { useMemo } from \"react\";\nimport ChatListItem from \"./components/ChatListItem\";\nimport Footer from \"./components/Footer\";\nimport {useAppState} from '../../../../state';\nimport {processChannelJoin, processChannelLeave} from '../../../../websockets/process';\n\nconst ChatList = ({ rooms, user, currentRoom, onLogOut }) => {\n  const [state, dispatch] = useAppState();\n\n  const processedRooms = useMemo(() => {\n    const roomsList = Object.values(rooms);\n    const main = roomsList.filter((x) => x.id === \"0\");\n    let other = roomsList.filter((x) => x.id !== \"0\");\n    other = other.sort(\n      (a, b) => +a.id.split(\":\").pop() - +b.id.split(\":\").pop()\n    );\n    return [...(main ? main : []), ...other];\n  }, [rooms]);\n\n  return (\n    <>\n      <div className=\"chat-list-container flex-column d-flex pr-4\">\n        <div className=\"py-2\">\n          <p className=\"h5 mb-0 py-1 chats-title\">Chats</p>\n        </div>\n        <div className=\"messages-box flex flex-1\">\n          <div className=\"list-group rounded-0\">\n            {processedRooms.map((room) => (\n              <ChatListItem\n                key={room.id}\n                onClick={() => {\n                  dispatch({type: \"set current room\", payload: room.id});\n                  // processChannelLeave();\n                  processChannelJoin(room.id);\n                }}\n                active={currentRoom === room.id}\n                room={room}\n              />\n            ))}\n          </div>\n        </div>\n        <Footer user={user} onLogOut={onLogOut} />\n      </div>\n    </>\n  );\n};\n\nexport default ChatList;\n","/home/roman/work/DR/basic-redis-chat-golang/client/src/components/Chat/components/MessageList/components/InfoMessage.jsx",[],"/home/roman/work/DR/basic-redis-chat-golang/client/src/components/Chat/components/MessageList/components/MessagesLoading.jsx",[],"/home/roman/work/DR/basic-redis-chat-golang/client/src/components/Chat/components/MessageList/components/SenderMessage.jsx",[],"/home/roman/work/DR/basic-redis-chat-golang/client/src/components/Chat/components/MessageList/components/NoMessages.jsx",[],"/home/roman/work/DR/basic-redis-chat-golang/client/src/components/Chat/components/MessageList/components/ReceiverMessage.jsx",[],"/home/roman/work/DR/basic-redis-chat-golang/client/src/components/Chat/components/ChatList/components/Footer.jsx",[],"/home/roman/work/DR/basic-redis-chat-golang/client/src/components/Chat/components/ChatList/components/ChatListItem/index.jsx",["160","161","162","163"],"// @ts-check\nimport \"./style.css\";\nimport React, { useMemo } from \"react\";\nimport moment from \"moment\";\nimport { useEffect } from \"react\";\nimport { getMessages } from \"../../../../../../api\";\nimport AvatarImage from \"../AvatarImage\";\nimport OnlineIndicator from \"../../../OnlineIndicator\";\nimport useAppStateContext, {useAppState} from '../../../../../../state';\n\n/**\n * @param {{ active: boolean; room: import('../../../../../../state').Room; onClick: () => void; }} props\n */\nconst ChatListItem = ({ room, active = false, onClick }) => {\n  const { online, name, userId } = useChatListItemHandlers(room);\n  return (\n    <div\n      onClick={onClick}\n      className={`chat-list-item d-flex align-items-start rounded ${\n        active ? \"bg-white\" : \"\"\n      }`}\n    >\n      <div className=\"align-self-center mr-3\">\n        <OnlineIndicator online={online} hide={room.id === \"0\"} />\n      </div>\n      <div className=\"align-self-center mr-3\">\n        <AvatarImage name={name} id={userId} />\n      </div>\n      <div className=\"media-body overflow-hidden\">\n        <h5 className=\"text-truncate font-size-14 mb-1\">{name}</h5>\n      </div>\n    </div>\n  );\n};\n\nconst useChatListItemHandlers = (\n  /** @type {import(\"../../../../../../state\").Room} */ room\n) => {\n  const { id, name } = room;\n  const [state] = useAppState();\n  /** Here we want to associate the room with a user by its name (since it's unique). */\n  const [isUser, online, userId] = useMemo(() => {\n    try {\n      let pseudoUserId = Math.abs(parseInt(id.split(\":\").reverse().pop()));\n      const isUser = pseudoUserId > 0;\n      const usersFiltered = Object.entries(state.users)\n        .filter(([, user]) => user.Username === name)\n        .map(([, user]) => user);\n      let online = false;\n      if (usersFiltered.length > 0) {\n        online = usersFiltered[0].OnLine;\n        pseudoUserId = +usersFiltered[0].id;\n      }\n      return [isUser, online, pseudoUserId];\n    } catch (_) {\n      return [false, false, \"0\"];\n    }\n  }, [id, name, state.users]);\n\n  return {\n    isUser,\n    online,\n    userId,\n    name: room.name,\n  };\n};\n\nexport default ChatListItem;\n","/home/roman/work/DR/basic-redis-chat-golang/client/src/components/Chat/components/MessageList/components/ClockIcon.jsx",[],"/home/roman/work/DR/basic-redis-chat-golang/client/src/components/Chat/components/OnlineIndicator.jsx",[],"/home/roman/work/DR/basic-redis-chat-golang/client/src/components/Chat/components/ChatList/components/AvatarImage.jsx",[],"/home/roman/work/DR/basic-redis-chat-golang/client/src/utils.js",[],"/home/roman/work/DR/basic-redis-chat-golang/client/src/components/Chat/components/ChatList/components/ChatIcon.jsx",[],{"ruleId":"164","severity":1,"message":"165","line":6,"column":9,"nodeType":"166","messageId":"167","endLine":6,"endColumn":22},{"ruleId":"168","severity":1,"message":"169","line":23,"column":8,"nodeType":"170","endLine":23,"endColumn":10,"suggestions":"171"},{"ruleId":"164","severity":1,"message":"172","line":13,"column":5,"nodeType":"166","messageId":"167","endLine":13,"endColumn":24},{"ruleId":"164","severity":1,"message":"173","line":14,"column":5,"nodeType":"166","messageId":"167","endLine":14,"endColumn":24},{"ruleId":"164","severity":1,"message":"174","line":15,"column":5,"nodeType":"166","messageId":"167","endLine":15,"endColumn":17},{"ruleId":"164","severity":1,"message":"175","line":17,"column":7,"nodeType":"166","messageId":"167","endLine":17,"endColumn":32},{"ruleId":"164","severity":1,"message":"176","line":18,"column":7,"nodeType":"166","messageId":"167","endLine":18,"endColumn":32},{"ruleId":"177","severity":1,"message":"178","line":33,"column":3,"nodeType":"179","endLine":38,"endColumn":4},{"ruleId":"164","severity":1,"message":"180","line":15,"column":9,"nodeType":"166","messageId":"167","endLine":15,"endColumn":24},{"ruleId":"164","severity":1,"message":"181","line":15,"column":26,"nodeType":"166","messageId":"167","endLine":15,"endColumn":42},{"ruleId":"164","severity":1,"message":"182","line":15,"column":44,"nodeType":"166","messageId":"167","endLine":15,"endColumn":56},{"ruleId":"164","severity":1,"message":"183","line":15,"column":58,"nodeType":"166","messageId":"167","endLine":15,"endColumn":72},{"ruleId":"164","severity":1,"message":"184","line":16,"column":8,"nodeType":"166","messageId":"167","endLine":16,"endColumn":26},{"ruleId":"164","severity":1,"message":"185","line":16,"column":7,"nodeType":"166","messageId":"167","endLine":16,"endColumn":22},{"ruleId":"164","severity":1,"message":"184","line":6,"column":8,"nodeType":"166","messageId":"167","endLine":6,"endColumn":26},{"ruleId":"168","severity":1,"message":"186","line":33,"column":7,"nodeType":"187","endLine":33,"endColumn":34},{"ruleId":"168","severity":1,"message":"188","line":37,"column":6,"nodeType":"170","endLine":37,"endColumn":19,"suggestions":"189"},{"ruleId":"164","severity":1,"message":"190","line":6,"column":9,"nodeType":"166","messageId":"167","endLine":6,"endColumn":19},{"ruleId":"164","severity":1,"message":"191","line":6,"column":21,"nodeType":"166","messageId":"167","endLine":6,"endColumn":39},{"ruleId":"164","severity":1,"message":"192","line":13,"column":5,"nodeType":"166","messageId":"167","endLine":13,"endColumn":18},{"ruleId":"164","severity":1,"message":"193","line":20,"column":7,"nodeType":"166","messageId":"167","endLine":20,"endColumn":18},{"ruleId":"164","severity":1,"message":"194","line":3,"column":9,"nodeType":"166","messageId":"167","endLine":3,"endColumn":14},{"ruleId":"164","severity":1,"message":"195","line":6,"column":29,"nodeType":"166","messageId":"167","endLine":6,"endColumn":48},{"ruleId":"164","severity":1,"message":"196","line":9,"column":10,"nodeType":"166","messageId":"167","endLine":9,"endColumn":15},{"ruleId":"164","severity":1,"message":"197","line":4,"column":8,"nodeType":"166","messageId":"167","endLine":4,"endColumn":14},{"ruleId":"164","severity":1,"message":"198","line":5,"column":10,"nodeType":"166","messageId":"167","endLine":5,"endColumn":19},{"ruleId":"164","severity":1,"message":"199","line":6,"column":10,"nodeType":"166","messageId":"167","endLine":6,"endColumn":21},{"ruleId":"164","severity":1,"message":"184","line":9,"column":8,"nodeType":"166","messageId":"167","endLine":9,"endColumn":26},"no-unused-vars","'LoadingScreen' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'state'. Either include them or remove the dependency array.","ArrayExpression",["200"],"'inputSignInUsername' is assigned a value but never used.","'inputSignInPassword' is assigned a value but never used.","'inputMessage' is assigned a value but never used.","'nodeIdInputSignInUsername' is assigned a value but never used.","'nodeIdInputSignInPassword' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","'viewMessagesAdd' is defined but never used.","'viewShowPageChat' is defined but never used.","'viewUsersAdd' is defined but never used.","'viewUsersClean' is defined but never used.","'useAppStateContext' is defined but never used.","'dataTypeSignOut' is assigned a value but never used.","React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression","React Hook useEffect has a missing dependency: 'rooms'. Either include it or remove the dependency array.",["201"],"'StorageGet' is defined but never used.","'storageKeyUserUUID' is defined but never used.","'viewNodeUsers' is assigned a value but never used.","'nodeIdUsers' is assigned a value but never used.","'login' is defined but never used.","'processChannelLeave' is defined but never used.","'state' is assigned a value but never used.","'moment' is defined but never used.","'useEffect' is defined but never used.","'getMessages' is defined but never used.",{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},"Update the dependencies array to be: [dispatch, state]",{"range":"206","text":"207"},"Update the dependencies array to be: [currentRoom, rooms]",{"range":"208","text":"209"},[744,746],"[dispatch, state]",[1108,1121],"[currentRoom, rooms]"]